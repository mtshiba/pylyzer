{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"editor/","title":"Editor integrations","text":""},{"location":"editor/#vscode","title":"VSCode","text":"<ul> <li>Install the extension.</li> </ul>"},{"location":"editor/#neovim","title":"Neovim","text":"<ul> <li>Setup mason.</li> <li>Type <code>:MasonInstall pylyzer</code> in Neovim.</li> </ul> <p>If you use LunarVim, no setup is required. Just install pylyzer and you are good to go.</p>"},{"location":"errors/errors/","title":"Pylyzer-specific errors","text":""},{"location":"errors/errors/#e0001-reassignment-of-a-function-referenced-by-other-functions","title":"E0001: Reassignment of a function referenced by other functions","text":"<pre><code>def g(): return f()\n\ndef f(): return 1\ndef f(): return \"a\" # E0001: Reassignment of a function referenced by other functions\n\nprint(g())\n</code></pre>"},{"location":"errors/errors/#e0002-__init__-doesnt-have-a-first-parameter-named-self","title":"E0002: <code>__init__</code> doesn't have a first parameter named <code>self</code>","text":"<pre><code>class C:\n    def __init__(a): pass # E0002\n</code></pre>"},{"location":"errors/errors/#e0003-__init__-as-a-member-variable","title":"E0003: <code>__init__</code> as a member variable","text":"<pre><code>class C:\n    __init__ = 1 # E0003\n</code></pre>"},{"location":"errors/warns/","title":"Pylyzer-specific warnings","text":""},{"location":"errors/warns/#w0188-used-value","title":"W0188: Used value","text":"<pre><code>def f(x): return x\n\nf(1) # W0188: UnusedWarning: the evaluation result of the expression (: {1, }) is not used\n</code></pre>"},{"location":"options/options/","title":"command line options","text":""},{"location":"options/options/#-server","title":"--server","text":"<p>Launch as a language server.</p>"},{"location":"options/options/#-dump-decl","title":"--dump-decl","text":"<p>Dump a type declarations file (d.er) after type checking.</p> <pre><code>$ pylyzer --dump-decl test.py\nStart checking: test.py\nAll checks OK: test.py\n\n$ ls\ntest.py  test.d.er\n</code></pre>"},{"location":"options/options/#-c-code","title":"-c/--code","text":"<p>Check code from the command line.</p> <pre><code>$ pylyzer -c \"print('hello world')\"\nStart checking: string\nAll checks OK: string\n</code></pre>"},{"location":"options/pyproject/","title":"<code>pyproject.toml</code> options","text":""},{"location":"options/pyproject/#toolpylyzerpythonpath","title":"<code>tool.pylyzer.python.path</code>","text":"<p>Path to the Python interpreter to use. If not set, the default Python interpreter will be used.</p> <pre><code>[tool.pylyzer.python]\npath = \"path/to/python\"\n</code></pre>"}]}